{"ast":null,"code":"import axios from 'axios';\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api'\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  register: async credentials => {\n    const response = await api.post('/auth/register', credentials);\n    return response.data;\n  },\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n  updateProfile: async data => {\n    const response = await api.patch('/auth/profile', data);\n    return response.data;\n  }\n};\n\n// Collections API\nexport const collectionsAPI = {\n  getCollections: async () => {\n    const response = await api.get('/collections');\n    return response.data;\n  },\n  getCollection: async id => {\n    const response = await api.get(`/collections/${id}`);\n    return response.data;\n  },\n  createCollection: async data => {\n    const response = await api.post('/collections', data);\n    return response.data;\n  },\n  updateCollection: async (id, data) => {\n    const response = await api.put(`/collections/${id}`, data);\n    return response.data;\n  },\n  deleteCollection: async id => {\n    const response = await api.delete(`/collections/${id}`);\n    return response.data;\n  },\n  // Entries\n  addEntry: async (collectionId, entry) => {\n    const response = await api.post(`/collections/${collectionId}/entries`, entry);\n    return response.data;\n  },\n  updateEntry: async (collectionId, entryIndex, entry) => {\n    const response = await api.put(`/collections/${collectionId}/entries/${entryIndex}`, entry);\n    return response.data;\n  },\n  deleteEntry: async (collectionId, entryIndex) => {\n    const response = await api.delete(`/collections/${collectionId}/entries/${entryIndex}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","authAPI","register","credentials","response","post","data","login","getProfile","get","updateProfile","patch","collectionsAPI","getCollections","getCollection","id","createCollection","updateCollection","put","deleteCollection","delete","addEntry","collectionId","entry","updateEntry","entryIndex","deleteEntry"],"sources":["/home/jerv/code_projects/data_playground/webapp/src/services/api.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\nimport { LoginCredentials, RegisterCredentials, ProfileUpdateData, User } from '../types/user';\nimport { Collection, CollectionFormData, Entry } from '../types/collection';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  \n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  \n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  register: async (credentials: RegisterCredentials) => {\n    const response = await api.post('/auth/register', credentials);\n    return response.data;\n  },\n  \n  login: async (credentials: LoginCredentials) => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  \n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n  \n  updateProfile: async (data: ProfileUpdateData) => {\n    const response = await api.patch('/auth/profile', data);\n    return response.data;\n  },\n};\n\n// Collections API\nexport const collectionsAPI = {\n  getCollections: async () => {\n    const response = await api.get('/collections');\n    return response.data;\n  },\n  \n  getCollection: async (id: string) => {\n    const response = await api.get(`/collections/${id}`);\n    return response.data;\n  },\n  \n  createCollection: async (data: CollectionFormData) => {\n    const response = await api.post('/collections', data);\n    return response.data;\n  },\n  \n  updateCollection: async (id: string, data: CollectionFormData) => {\n    const response = await api.put(`/collections/${id}`, data);\n    return response.data;\n  },\n  \n  deleteCollection: async (id: string) => {\n    const response = await api.delete(`/collections/${id}`);\n    return response.data;\n  },\n  \n  // Entries\n  addEntry: async (collectionId: string, entry: Entry) => {\n    const response = await api.post(`/collections/${collectionId}/entries`, entry);\n    return response.data;\n  },\n  \n  updateEntry: async (collectionId: string, entryIndex: number, entry: Entry) => {\n    const response = await api.put(`/collections/${collectionId}/entries/${entryIndex}`, entry);\n    return response.data;\n  },\n  \n  deleteEntry: async (collectionId: string, entryIndex: number) => {\n    const response = await api.delete(`/collections/${collectionId}/entries/${entryIndex}`);\n    return response.data;\n  },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}